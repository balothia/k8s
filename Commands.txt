kubectl create -f pod-definition.yml
kubectl get pods
kubectl get nodes
kubectl describe pod myapp-pod
kubectl delete pod webapp

kubectl get replicationcontroller
kubectl get replicaset
kubectl replace -f replicaset-definition.yml
kubectl scale --replicas=6 -f replicaset-definition.yml
kubectl scale --replicas=6 replicaset myapp-replicaset
kubectl delete replicaset myapp-replicaset
kubectl edit replicaset new-replica-set


vim commands for writing yaml or yml files
au BufNewFile,BufRead *.yaml,*.yml set et ts=2 sw=2
OR
" add yaml stuffs
au! BufNewFile,BufReadPost *.{yaml,yml} set filetype=yaml foldmethod=indent
autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

kubectl get deployments
kubectl get all
kubectl scale deployment/webapp --replicas=3

Create an NGINX Pod
kubectl run --generator=run-pod/v1 nginx --image=nginx

Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)
kubectl run --generator=run-pod/v1 nginx --image=nginx --dry-run -o yaml
kubectl run --generator=run-pod/v1 redis --image=redis:alpine -l tier=db

Create a deployment
kubectl create deployment --image=nginx nginx

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)
kubectl create deployment --image=nginx nginx --dry-run -o yaml

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run) with 4 Replicas (--replicas=4)
kubectl create deployment --image=nginx nginx --dry-run -o yaml > nginx-deployment.yaml
-> kubectl create deployment http-frontend --image=http:2.4-alpine --dry-run -o yaml
Save it to a file, make necessary changes to the file (for example, adding more replicas) and then create the deployment.
kubectl run --generator=deployment/v1beta1 nginx --image=nginx --dry-run --replicas=4 -o yaml > nginx-deployment.yaml

Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379
kubectl expose pod redis --port=6379 --name redis-service --dry-run -o yaml
kubectl create service clusterip redis --tcp=6379:6379 --dry-run -o yaml
kubectl expose pod nginx --port=80 --name nginx-service --dry-run -o yaml
kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run -o yaml

kubectl expose deployment webapp --type=NodePort --port=8080 --name=webapp-service --dry-run -o yaml > webapp-service.yaml



kubectl get po --namespace=kube-system
kubectl create -f pod-definition.yml --namespace=dev
kubectl create  namespace dev
kubectl config set-context $(kubectl config current-context) --namespace=dev
kubectl get po --all-namespaces

Sending binding request to API
curl --header "Content-Type:application/json" --request POST --data '{"apiVersion":"v1","kind":"Binding","metadata":{"name":"nginx"},"target":{"apiVersion":"v1","kind":"Node","name":"Node02"}}' \
http://$server/api/v1/namespaces/default/pods/$PODNAME/binding/

kubectl get pods --selector app=App1
kubectl get pods -o wide

kubectl taint nodes node-name key=value:taint-effect
kubectl taint node node1 app=blue:NoSchedule
kubectl describe node kubemaster |grep -i taint
Un-taint a node
kubectl taint node master node-role.kubernetes.io/master:NoSchedule-

kubectl label nodes node1 <label-key>=<label-value>
kubectl label nodes node1 size=Large

kubectl get daemonsets



